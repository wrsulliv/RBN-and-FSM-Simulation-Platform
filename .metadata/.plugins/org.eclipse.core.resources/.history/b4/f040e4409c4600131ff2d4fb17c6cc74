
public class RBN_FSM_Helper {

	//  Return a boolean array of the current state of the RBN (the states of the reservoir nodes from 0 to N-1)
	public static int[] getFSMStateFromRBN(RBN rbn)
	{
		int[] boolStateArray = new int[rbn.nodes.size() - 2];
		for(int i = 2; i < rbn.nodes.size(); i++) // 2 of the nodes are for input and output
		{
			boolStateArray[i] = rbn.nodes.get(i).currentState;
			
		}
		
		return boolStateArray;
		
	}
	
	public static FSM generateFSMFromRBN(RBN rbn)
	{	
		//  First, get the number of nodes in the RBN
		int numNodes = rbn.nodes.size() - 2; 
		
		//  The number of states in the FSM is 2^(# of nodes in the RBN)
		//  This means the states in the FSM range from when the nodes in the RBN are all 0s to all 1s
		int numStates = 2^numNodes;
		
		//  Create the FSM Object, this will add the states to the FSM
		FSM fsm = new FSM(numStates, 1);
		
		//  Start looping through each state and testing what the next state is given a 0 or 1 input
		for(int i = 0; i < numStates; i++)
		{
			//  Test input = 0
			rbn.reinitialize(i, 0);
			rbn.nextState(0); // Doesn't matter what the next input is because we reset it
			int zero_nextState = getCurrentRBNState(rbn);
			int zero_output = rbn.getCurrentOutput();
			
			//  Test input = 1
			rbn.reinitialize(i, 0);
			rbn.nextState(0); //  Doesn't matter what the next input is because we're done testing this state
			int one_nextState = getCurrentRBNState(rbn);
			int one_output = rbn.getCurrentOutput();
			
			//  Submit the states to the FSM state object
			fsm.states.get(i).nextStateArray[0] = zero_nextState;
			fsm.states.get(i).nextStateArray[1] = one_nextState;
			
			//  Now, determine what outputs were created and add to the state
			fsm.states.get(i).outputArray[0] = zero_output;
			fsm.states.get(i).outputArray[1] = one_output;
		}
		
		return fsm;
		
		
		
	}

	//  Generate a decimal number which represents the current FSM state of the RBN network
	private static int getCurrentRBNState(RBN rbn)
	{
		
		//  Make a boolean array to hold the RBN node values
		int[] stateArray = new int[rbn.nodes.size() - 2];
		
		//  Loop through each node and record in the boolean array
		for(int i = 2; i < rbn.nodes.size(); i++) // 2 of the nodes are for input and output
		{
			//  Populate the state array with the RBN node values
			stateArray[i - 2] = rbn.nodes.get(i).currentState;
		}
		
		//  Convert the state array to a decimal number
		int decimalState = MathHelper.convertBinaryArrayToDec(stateArray);
		
		//  Return the decimal state
		return decimalState;
		
	}
	
}
