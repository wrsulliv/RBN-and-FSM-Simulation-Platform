import java.util.ArrayList;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import javax.imageio.ImageIO;

public class RBN {

	int N; //  The number of nodes
	int L; // Number of input nodes
	int K_avg; // Average connectivity
	ArrayList<Node> nodes;
	ArrayList<Integer> inputConnections;
	int total_connections;
	public RBN(int K_avg, int N, int L)
	{
		this.N = N;
		this.L = L;
		this.nodes = new ArrayList<Node>();
		this.total_connections = K_avg * N;
		//int[] binArray = MathHelper.convertDecToBinArray(13, 10); // TESTING TODO:  make a test suite
		//int dec = MathHelper.convertBinaryArrayToDec(binArray); // TESTING TODO:  make a test suite
		generateNodes();
		setupInputConnections();
		connectNodes();
		setupNodeLogicFunctions();
		
	}
	
	//  Get an Integer array representing the state of the internal nodes
	public int[] getInternalState()
	{
		int[] networkState = new int[this.nodes.size() - 2];
		for(int i = 2; i < this.nodes.size(); i++)
		{
			
			networkState[i - 2] = this.nodes.get(i).currentState;
		}
		
		return networkState;
	}
	
	//  TODO:  Make the classes clonable so we don't have to deal with int arrays
	//  Returns the number of bits differing in the internal nodes of the two networks.  The networks must have the same number of nodes.
	public int getHammingDistance(RBN rbn1, RBN rbn2) throws HammingNodeCountException
	{
		if(!(rbn1.nodes.size() == rbn2.nodes.size()))
		{
			
			throw new HammingNodeCountException();
		}
		int difCount = 0;
		for(int i = 0; i < rbn1.nodes.size(); i++)
		{
			
			if(!(rbn1.nodes.get(i).currentState == rbn2.nodes.get(i).currentState))
			{
				difCount++;
			}
		}
		
		return difCount;
	}
	
	public int getHammingDistance(int[] states1, int[] states2) throws HammingNodeCountException
	{
		if(!(states1.length == states2.length))
		{
			
			throw new HammingNodeCountException();
		}
		int difCount = 0;
		for(int i = 0; i < states1.length; i++)
		{
			
			if(!(states1[i] == states2[i]))
			{
				difCount++;
			}
		}
		
		return difCount;
	}
	
	//  Return the Perturbance Spreading of two differing input strings (Variables from Snyder's paper)
	//  This is a number between 0 and 1 which tells how far each node is on average from the other
	public float calculatePerturbanceSpreading(RBN m, int[] uA, int[] uB)
	{
		//  Calculate the final state of each input string first
		m.RunSimulation(uA, "/Users/willimac/Desktop/uA_State.csv", true);
		int[] resultState_uA = m.getInternalState();
		m.RunSimulation(uB, "/Users/willimac/Desktop/uB_State.csv", true);
		int[] resultState_uB = m.getInternalState();
		
		//  Get the Hamming distance
		int hammingDistance;
		try {
			hammingDistance = getHammingDistance(resultState_uA, resultState_uB);
			
			//  Calculate the perturbation spreading
			float perturbance = (float)hammingDistance / (float)(m.nodes.size() - 2);
			
			return perturbance;
			
		} catch (HammingNodeCountException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return -1; //  Error
		}
		
		
		
	}
	
	public float calculateSeparation(RBN m, int tau, int[] inputString)
	{
		//  Get the number of digits which should stay the same
		int numberOfSimilar = inputString.length - tau;
		
		//  Calculate the complimentary input string
		int[] newInputString = inputString;
		for(int i = 0; i < numberOfSimilar; i++)
		{
			if(inputString[i] == 0)
			{
				newInputString[i] = 1;
			}
			else
			{
				newInputString[i] = 0;
			}
			
		}
		
		return calculatePerturbanceSpreading(m, inputString, newInputString);
	}
	
	public float calculateFadingMemory(RBN m, int[] inputString)
	{
		return calculateSeparation(m, inputString.length - 1, inputString);
		
	}
	
	public float calculateComputationalCapability(RBN m, int[] inputString, int tau)
	{
		float separation = calculateSeparation(m, tau, inputString);
		float fadingMemory = calculateFadingMemory(m, inputString);
		return separation - fadingMemory;
	}
	public void regenerateInternalNodes()
	{
		
		//  First make a mark of which nodes have input connections
		for(int i = 0; i < this.nodes.size(); i++)
		{
			if(this.nodes.get(0).hasInputNode(0))
			{
				this.nodes.get(i).inputNodes = new ArrayList<Integer>();
				this.nodes.get(i).inputNodes.add(0); //  Re-add the input node
			}
			else
			{
				this.nodes.get(i).inputNodes = new ArrayList<Integer>();
			}
		}
		
		connectNodes();
	}
	// TODO:  Actually make boolean bitmap work
	//  Runs the simulation for a certain number of iterations and outputs to a bitmap file
	public void RunSimulation(int[] inputString, String saveFile, Boolean bitmap)
	{
		
		this.reinitialize(0, inputString[0]);
		
		//  Loop through each input string item and determine the next state.
		for(int i = 0; i < inputString.length; i++)
		{
			//  Go to the next state
			this.nextState(inputString[i], saveFile);
		}
		
	}
	
	//  TODO:  change this method such that a bitmap is stored in the RBN class, but not written.  Then make a differnt function to write the image to a file
	//  Runs the simulation for a certain number of iterations and outputs to a bitmap file
	public void RunSimulation(int[] inputString, String bmpPath)
	{
		
		this.reinitialize(0, inputString[0]);
		
		//  Create the actual image object.  The number of rows is 1 more than the number of inputs because of the initial state.
		BufferedImage bf = new BufferedImage(this.N, inputString.length + 1, BufferedImage.TYPE_INT_RGB);
		
		//  Loop through each input string item and determine the next state.
		for(int i = 0; i < inputString.length; i++)
		{
			//  Record the current state (Shows the last submitted input)
			for(int j = 0; j < N; j++)
			{
				bf.setRGB(j, i, this.nodes.get(j).currentState*(255|(255<<8)|(255<<16))); //  Only use either black or white
			}
			
			//  Go to the next state
			this.nextState(inputString[i]);
		}
		
		//  Save the bitmap
		File outputFile = new File(bmpPath);
		try {
			ImageIO.write(bf, "bmp", outputFile);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	public RBN(String csvFile)
	{
	
		ArrayList<String[]> csvImport = spliceCSVToArrayList(csvFile);
		this.nodes = new ArrayList<Node>();
		this.N = csvImport.size() - 2; // Subtract 2 for the input / output nodes
		
		// Create the input and output nodes
		this.nodes.add(new Node());
		this.nodes.add(new Node());
		
		//  Create the reservoir nodes
		for (int i = 2; i < csvImport.size(); i++)
		{
			this.nodes.add(new Node());
			
			//  Add the input nodes
			for(int j = 1; j < csvImport.get(i).length - 1; j++) // Skip over the node ID and the boolean function
			{
				this.nodes.get(i).inputNodes.add(Integer.decode(csvImport.get(i)[j]));
				
			}
			
			//  Extract the boolean function from the CSV
			String functString = csvImport.get(i)[csvImport.get(i).length - 1]; // Get the function in the form of a binary string
			functString = functString.substring(1, functString.length() - 1);  // Remove the brackets
			
			//  Turn the string into a boolean array
			int[] boolArray = new int[functString.length()];
			for(int j = 0; j < functString.length(); j++)
			{
				boolArray[(functString.length() - 1) - j] = Integer.decode(Character.toString(functString.charAt(j)));
				
			}
			
			// Add the function to the node
			this.nodes.get(i).logicFunction = boolArray;

			
		}
		
		
	}
	
	public ArrayList<String[]> spliceCSVToArrayList(String csvFile)
	{
		
		BufferedReader br = null;
		String line = "";
	 
		ArrayList<String[]> csvImport = new ArrayList<String[]>();
		try {
	 
			br = new BufferedReader(new FileReader(csvFile));
			while ((line = br.readLine()) != null) 
			{
			    // use comma as separator
				String[] csvLineArray = line.split(",");
				csvImport.add(csvLineArray);
			}
	 
			
		//  Error handling and file closing stuff
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		return csvImport;
	}
	
	//  Setup the logic functions
	private void setupNodeLogicFunctions()
	{
		for(int i = 2; i < N + 2; i++)
		{
			int input_node_count = this.nodes.get(i).inputNodes.size();
			int num_input_combinations = (int)Math.pow(2,input_node_count);
			int num_functions = (int)Math.pow(2, (num_input_combinations));
			int rnd_function = this.rndGenerator(num_functions - 1); // Subtract 1 because all 0s counts as a function
			int[] functArray = MathHelper.convertDecToBinArray(rnd_function, num_input_combinations);
			this.nodes.get(i).logicFunction = functArray;
			
		}
	}

	
	//  Give L input connections randomly to the reservoir nodes
	private void setupInputConnections()
	{
		for(int i = 0; i < L; i++)
		{
			int randomNode = rndGenerator(N - 1) + 2;
			
			//  If the input node is already there then try again
			if(nodes.get(randomNode).hasInputNode(0))
			{
				i--;
			}
			else
			{
				nodes.get(randomNode).addInputNode(0);
			}
		}
	}
	
	//  Create an input, and N nodes with random Ki values
	private void generateNodes()
	{
		//  Generate input and output nodes, input = index 0, output = index 1
		nodes.add(new Node());
		nodes.add(new Node());
		 
		// Generate N different nodes
		for (int i = 0; i < N; i++)
		{
			Node n = new Node();
			nodes.add(n);
		}
		
	}
	
	//  Connect all nodes within the reservoir based on their Ki values
	private void connectNodes()
	{
		int remainingConnections = this.total_connections;
		int nodeIndex = 0; // Start at 0 because we will add 2 in the loop
		while(remainingConnections > 0)
		{
			nodeIndex += 1;
			remainingConnections -= 1;
			
			int inputNodeIndex = rndGenerator(N - 1) + 2; // Subtract 1 since we start at 0 index, add 2 because of the input / output nodes
			//  As long as the connection doesn't already exist, connect the node
			if (!(nodes.get((nodeIndex % this.N) + 2).hasInputNode(inputNodeIndex)))
			{
				nodes.get((nodeIndex % this.N) + 2).addInputNode(inputNodeIndex);	
			}
			else
			{
				remainingConnections += 1;  // Try a different connection with this same node because this one already existed
				nodeIndex -= 1;
			}	
		}
	}
	
	//  Gets the current state of the network based only on the node values in the reservoir
	public int generateCurrentStateOutput()
	{
		return 1; // TODO:  Actually make this work!
		
	}
	//  Write network state to file
	public void writeNetworkSateToFile(String fileName)
	{
		PrintWriter writer;
		try {
				writer = new PrintWriter(new FileWriter(fileName, true));
				for(int i = 0; i < N + 2; i++) // N+2 because of the input/output nodes
				{
					writer.print(Integer.toString(this.nodes.get(i).currentState) + " ");
				}
				writer.print("\n");
				writer.close();
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	//  Write network to a file
	public void writeNetworkSetupToFile(String fileName)
	{
		PrintWriter writer;
		try {

			writer = new PrintWriter(fileName, "UTF-8");
			
			for(int i = 0; i < N + 2; i++) // N+2 because of the input/output nodes
			{
				//  Print a column with the nodes ID
				writer.print(Integer.toString(i) + ",");

				//  Print columns with the nodes input connections
				for(int j = 0; j < nodes.get(i).inputNodes.size(); j++)
				{
					writer.print(Integer.toString(nodes.get(i).inputNodes.get(j)) + ",");
				}
				
				//  Write the binary function to the csv file if the node is part of the reservoir
				if(i >= 2)
				{
					int[] binFunctArray = nodes.get(i).logicFunction;
					String binaryFunctString = "["; // Add brackets so excel will read this as text instead of a number (could have added anything)
					for(int j = binFunctArray.length - 1; j >= 0; j--) //  Start at the upper bits and keep concatenating until the binary string is made
					{
						binaryFunctString = binaryFunctString + binFunctArray[j];
						
					}
					writer.print(binaryFunctString + "]");
				}
				writer.print("\n");
			}
			
			writer.close();
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	//  Generate a random number between 0 and the maxValue
	private int rndGenerator(int maxValue)
	{
		
		return (int)Math.floor((Math.random() * (double)maxValue + 1)); // This ensures that there's an equal sample space for each possible integer
	}
	
	//  Reinitialize the network given a decimal number which also acts as a binaryArray
	public void reinitialize(int decimalState, int input)
	{
		int[] stateArray = MathHelper.convertDecToBinArray(decimalState, N);
		for(int i = 2; i < N + 2; i++)
		{
			//  Reset each state based on the decimal number sent in
			this.nodes.get(i).currentState = stateArray[i - 2]; // Subtract 2 because of the input and output noes
			
			
		}
		
		//  Set the input to the desired input.  
		this.nodes.get(0).currentState = input;
		
		//  When the nextState function is called, then the output and states will be based on this setup
		
	}
	
	//  Increment all nodes to the next state
	public void nextState(int input, String saveFile)
	{
		//  Write the current state before switching to the next
		this.writeNetworkSateToFile(saveFile);
		
		//  For each node in the network
		for(int i = 2; i < N + 2; i++)
		{
			
			//  Create a boolean array of the input values
			int[] boolInputArray = new int[this.nodes.get(i).inputNodes.size()];
			
			//  then, loop through each node in the input list and add its state value to the input value array
			for(int j = 0; j < this.nodes.get(i).inputNodes.size(); j++)
			{
				boolInputArray[j] = nodes.get(nodes.get(i).inputNodes.get(j)).currentState;
			}
			
			//  Determine the nextState of the node by using the input combinations, and the selected logic function
			
			//  Start by getting the row of the input combination within the logic function (Imagine a table)
			int inputRow = MathHelper.convertBinaryArrayToDec(boolInputArray);
			int nextState = nodes.get(i).logicFunction[inputRow];
			nodes.get(i).nextState = nextState;
		}
		
		//  Set the new input state
		this.nodes.get(0).nextState = input;
		//  Set the new output state
		this.nodes.get(1).nextState = this.generateCurrentStateOutput();
		
		//  Commit the new input/output states
		this.nodes.get(0).commitNextState();
		this.nodes.get(1).commitNextState();
		
		//  Loop through all internal nodes and commit the new state
		for(int i = 2; i < N + 2; i++)
		{
			nodes.get(i).commitNextState();
		}
		
	}
}

