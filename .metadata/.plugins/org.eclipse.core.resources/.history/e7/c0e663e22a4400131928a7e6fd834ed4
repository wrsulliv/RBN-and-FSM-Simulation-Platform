import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

public class RBN {

	int N; //  The number of nodes
	int maxKi; // Max number of connections to internal nodes
	int L; // Number of input nodes
	ArrayList<Node> nodes;
	ArrayList<Integer> inputConnections;
	public RBN(int N, int maxKi, int L)
	{
		this.N = N;
		this.L = L;
		this.maxKi = maxKi;
		generateNodes();
		connectNodes();
		setupInputConnections();
	}
	
	//  Give L input connections randomly to the reservoir nodes
	private void setupInputConnections()
	{
		for(int i = 0; i < L; i++)
		{
			int randomNode = rndGenerator(N - 1) + 1;
			
			//  If the flag is already set then try a different node.
			if(nodes.get(randomNode).hasInputNode(0))
			{
				i--;
			}
			else
			{
				nodes.get(i).addInputNode(0);
			}
		}
	}
	
	//  Create an input, and N nodes with random Ki values
	private void generateNodes()
	{
		//  Generate input and output nodes, input = index 0, output = index 1
		
		for (int i = 0; i < N; i++)
		{
			//  Choose Ki for the node
			int ki = rndGenerator(this.maxKi);
			Node n = new Node(ki);
			nodes.add(n);
		}
		
	}
	
	//  Connect all nodes within the reservoir based on their Ki values
	private void connectNodes()
	{
		for(int i = 1; i < (N + 1); i++) //  N + 1 because of the input node
		{
			for(int j = 0; j < nodes.get(i).Ki; j++)
			{
				int inputNodeIndex = rndGenerator(N - 1) + 1; // Subtract 1 since we start at 0 index, add 2 because of the input / output nodes
				//  As long as the connection doesn't already exist, connect the node
				if (!(nodes.get(i).hasInputNode(inputNodeIndex)))
				{
					nodes.get(i).addInputNode(inputNodeIndex);	
				}
				else
				{
					j--;
				}
			}
		}
		
	}
	
	//  Write network to a file
	public void writeToFile(String fileName) throws FileNotFoundException, UnsupportedEncodingException
	{
		PrintWriter writer = new PrintWriter(fileName, "UTF-8");
		
		for(int i = 0; i < N + 1; i++) // N+1 because of the input node
		{
			writer.println("Node " + );
			
		}
		
		writer.println("The second line");
		writer.close();
	}
	//  Generate a random number between 0 and the maxValue
	private int rndGenerator(int maxValue)
	{
		
		return (int)(Math.random() * (double)maxValue);
	}
	
	//  Increment all nodes to the next state
	public void nextState()
	{
		
		
	}
}
